#!/usr/bin/env python
"""
Produces or modifies a checklist.csv file that summmarizes the QC .pdf
reports generated by the qc.py pipeline.

Usage: 
    qc-report.py [options] <project>

Arguments: 
    <project>           Full path to the project directory containing data/.

Options: 
    --verbose          Be chatty
    --debug            Be extra chatty

DETAILS

    This finds all human .pdfs in qc/, figures out which of these are
    not currently in checklist.csv, and adds their names to the list
    of scans.

    checklist.csv is a space-delimited file that has a column containing
    the pdf documents, as well as a place for people to mark that they 
    have reviewed them.

    This message is printed with the -h, --help flags.
"""

import os
import sys
import datetime
import glob
import numpy as np
import scipy as sp
import scipy.signal as sig
import dicom as dcm
import nibabel as nib
import datman as dm
import datman.utils
import datman.scanid
import subprocess as proc
from copy import copy
from docopt import docopt

VERBOSE = False
DRYRUN  = False
DEBUG   = False

def parse_checklist(base_path, checklist):
    """
    Looks for the checklist file. If it does not exist, we don't do anything.
    If it does, we keep a list of the already-entered scans so we only append
    scans we haven't QCed yet.
    """

    # if the checklist does not exist yet, we dont need to do anything
    if os.path.isfile(checklist) == False:
        return None

    scans = []
    with open(checklist) as f:
        for line in f:
            line = line.strip('\n')
            scans.append(line.split(' ')[0])
    try:
        scans.remove('')
    except:
        pass

    return scans

def get_qc(base_path):
    """
    Gets all of the human qc .pdf files in qc/, and returns them as a list. 
    """
    files = os.listdir(os.path.join(base_path, 'qc'))
    files = filter(lambda x: '.pdf' in x, files)
    files = filter(lambda x: 'PHA' not in x, files)

    return files

def main():

    arguments = docopt(__doc__)
    project   = arguments['<project>']
    VERBOSE   = arguments['--verbose']
    DEBUG     = arguments['--debug']

    checklist = os.path.join(project, 'metadata/checklist.csv')

    # finds all of the .pdfs already in the checklist
    scans = parse_checklist(project, checklist)

    # gets a list of all the unposted pdfs
    files = get_qc(project)
    if scans != None:
        files = filter(lambda x: x not in scans, files)

    files.sort()

    with open(checklist, "a") as f:
        for fname in files:
            f.write(fname + ' \n')

    print('Added {} qc reports to {}'.format(len(files), checklist))

if __name__ == '__main__':
    main()
