name: Check that code changes are valid

# Update this before PR
on:
  push:
    branches: [fix_config]

jobs:
  # run-tests:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: ./.github/build_datman
  #     - name: Install testing requirements
  #       run: python -m pip install .[test]
  #     - name: Run tests
  #       run: python -m pytest -v tests
  #     - name: Check code coverage
  #       run: |
  #         python -m pytest tests --junitxml=tests/junit-report.xml --cov . \
  #         --cov-report term-missing --cov-report html
  #     - name: Archive junit report
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: junit-report
  #         path: tests/junit-report.xml
  #     - name: Archive code coverage report
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: code-cov-report
  #         path: htmlcov
  # build-docs:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: ./.github/build_datman
  #     - name: Install docs requirements
  #       run: python -m pip install .[docs]
  #     - name: Build docs
  #       run: sphinx-build docs docs/_build
  #     - name: Add .nojekyll file to build folder
  #       run: touch docs/_build/.nojekyll
  #     - name: Deploy docs if the branch has updated
  #       uses: JamesIves/github-pages-deploy-action@v4.2.2
  #       with:
  #         branch: gh-pages
  #         folder: docs/_build
  #       if: github.event_name == 'push'
  deploy-to-testpypi:
    # needs: run-tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/build_datman
      - name: Install build packages
        run: python -m pip install .[build]
      - name: Create package
        run: python -m build
      - name: Setting hardcoded version for testing
        run: export VERSION="0.2.1"
      # - name: See github tag name
      #   run: echo "${GITHUB_REF#refs/*/}"
      - name: Check sdist
        run: "twine check dist/datman-${VERSION}*.tar.gz"
      - name: Check wheel
        run: "twine check dist/datman-${VERSION}*.whl"
      - name: Create virtual env to install sdist in
        run: |
          python -m venv /tmp/test_install
          source /tmp/test_install/bin/activate
          pip install --upgrade pip
          pip install dist/datman-*.tar.gz
      - name: Get installed version
        run: "export install_version=$(python -c 'import datman; print(datman.__version__)')"
      - name: Report installed version
        run: echo ${install_version}
      - name: Echo result of version check
        run: echo $(python -c \"import datman; print(datman.__version__)\")
      - name: Compare installed version to expected version
        run: "[[ \"$install_version\" == \"${VERSION}\" ]]"
      - name: Deactivate virtual env
        run: source deactivate
      - name: Upload to test pypi
        run: echo "Skipping for now"
